// Generated by CoffeeScript 1.8.0
var EventEmitter, Zookeeper,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

Zookeeper = (function(_super) {
  __extends(Zookeeper, _super);

  Zookeeper.logger = console;

  function Zookeeper(handler, options) {
    var url;
    this.handler = handler;
    this.options = options;
    this.status = {
      status: 'booting',
      since: new Date
    };
    url = this.options.url;
    Zookeeper.logger.info("[zookeeper] connecting to " + url);
    this.socket = require('socket.io-client').connect(url);
    this.socket.on('disconnect', (function(_this) {
      return function(reason) {
        Zookeeper.logger.warn('[zookeeper] disconnected: %s', reason);
        return _this.stop();
      };
    })(this));
    this.socket.on('start', (function(_this) {
      return function() {
        return _this.start();
      };
    })(this));
    this.socket.on('stop', (function(_this) {
      return function() {
        return _this.stop();
      };
    })(this));
    this.socket.on('connect', (function(_this) {
      return function() {
        Zookeeper.logger.info('[zookeeper] connected, registering...');
        return _this.socket.emit('register', {
          clientId: _this.options.clientId || ("" + _this.options.clientType + "-" + (require('os').hostname().toLowerCase())),
          clientType: _this.options.clientType
        });
      };
    })(this));
    this.handler.on('heartbeat', (function(_this) {
      return function(message) {
        Zookeeper.logger.info('heartbeat:', message);
        return _this.socket.emit('heartbeat', message);
      };
    })(this));
  }

  Zookeeper.prototype.setStatus = function(newStatus) {
    var oldStatus;
    if (newStatus !== this.status.status) {
      oldStatus = this.status.status;
      this.status.status = newStatus;
      this.status.since = new Date;
      return this.emit('status', {
        from: oldStatus,
        to: newStatus
      });
    }
  };

  Zookeeper.prototype.stop = function() {
    Zookeeper.logger.info('[zookeeper] stopping...');
    this.setStatus('stopping');
    return this.handler.stop((function(_this) {
      return function(err) {
        if (err) {
          Zookeeper.logger.warn('[zookeeper] error stopping:', err.stack || err);
        }
        Zookeeper.logger.info('[zookeeper] stopped.');
        return _this.setStatus('stopped');
      };
    })(this));
  };

  Zookeeper.prototype.start = function() {
    Zookeeper.logger.info('[zookeeper] starting...');
    this.setStatus('starting');
    return this.handler.start((function(_this) {
      return function(err) {
        if (err) {
          Zookeeper.logger.warn('[zookeeper] error starting:', err.stack || err);
          return _this.setStatus('failed');
        } else {
          Zookeeper.logger.info('[zookeeper] started.');
          return _this.setStatus('running');
        }
      };
    })(this));
  };

  return Zookeeper;

})(EventEmitter);

module.exports = Zookeeper;
